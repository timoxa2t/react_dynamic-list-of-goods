{"version":3,"sources":["components/GoodsList/GoodsList.tsx","api/goods.ts","components/Button/Button.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["GoodsList","goods","className","map","good","style","backgroundColor","color","name","id","getAll","delay","Promise","resolve","setTimeout","then","fetch","response","ok","Error","json","Button","content","loadGoods","setSelected","selected","isLoading","type","onClick","disabled","classNames","Button__active","Loader","defaultButtons","action","title","sort","firstGood","secondGood","localeCompare","slice","filter","App","useState","setGoods","loading","setLoading","error","setError","activeButton","setActiveButton","handleGoodsLoad","callback","a","loadedGoods","typedError","message","ReactDOM","render","document","getElementById"],"mappings":"yTAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,oBAAIC,UAAU,YAAd,SACGD,EAAME,KAAI,SAAAC,GAAI,OACb,oBAEE,UAAQ,OACRC,MAAO,CAAEC,gBAAiBF,EAAKG,OAC/BL,UAAU,kBAJZ,SAMGE,EAAKI,MALDJ,EAAKK,UCDX,SAASC,IACd,OAPYC,EAOA,IANL,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,OAMnBI,MAAK,kBAAMC,MAVH,4EAWRD,MAAK,SAAAE,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,oCAGlB,OAAOF,EAASG,UAdtB,IAAcT,E,MAkBP,I,gBCXMU,EAA0B,SAAC,GAOjC,IANLZ,EAMI,EANJA,GACAa,EAKI,EALJA,QACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,SACAC,EACI,EADJA,UAOA,OACE,wBACEC,KAAK,SACL,UAASlB,EACTmB,QATgB,WAClBL,IACAC,EAAYf,IAQVoB,SAAUH,GAAaD,EACvBvB,UAAW4B,IAAW,SAAU,CAAEC,eAAgBN,IALpD,SAOGH,KC9BMU,G,MAAmB,kBAC9B,qBAAK9B,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCKb+B,EAA2B,CAC/B,CACExB,GAAI,aACJyB,OAAQxB,EACRyB,MAAO,kBAET,CACE1B,GAAI,oBACJyB,OHKqB,WACvB,OAAOxB,IACJK,MAAK,SAAAd,GAAK,OAAIA,EAAMmC,MACnB,SAACC,EAAWC,GAAZ,OAA2BD,EAAU7B,KAAK+B,cAAcD,EAAW9B,SACnEgC,MAAM,EAAG,OGRXL,MAAO,sBAET,CACE1B,GAAI,aACJyB,OHOuB,WACzB,OAAOxB,IACJK,MAAK,SAAAd,GAAK,OAAIA,EAAMwC,QACnB,kBAAyB,QAAzB,EAAGlC,aGTL4B,MAAO,mBAIEO,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAO1C,EAAP,KAAc2C,EAAd,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA0BH,mBAAS,IAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAAwCL,mBAAS,IAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KAEMC,EAAe,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEAEpBP,GAAW,GAFS,SAGMM,IAHN,OAGdE,EAHc,OAKpBV,EAASU,GALW,gDAOdC,EAPc,KASpBP,EAASO,EAAWC,SATA,yBAWpBV,GAAW,GAXS,4EAAH,sDAerB,OACE,sBAAK5C,UAAU,MAAf,UACE,oBACEA,UAAU,aADZ,mCAMA,oBAAIA,UAAU,oBAAd,SACG+B,EAAe9B,KAAI,gBAAGM,EAAH,EAAGA,GAAI0B,EAAP,EAAOA,MAAOD,EAAd,EAAcA,OAAd,OAClB,oBAAahC,UAAU,oBAAvB,SACE,cAAC,EAAD,CACEO,GAAIA,EACJc,UAAW,kBAAM4B,EAAgBjB,IACjCV,YAAa0B,EACbzB,SAAUwB,IAAiBxC,EAC3BiB,UAAWmB,EACXvB,QAASa,KAPJ1B,QAaZoC,GACC,cAAC,EAAD,IAGDE,EACG,6BAAKA,IACL,cAAC,EAAD,CAAW9C,MAAOA,QC3E5BwD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0c5bc88a.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from '../../types/Good';\nimport './GoodsList.scss';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul className=\"GoodsList\">\n    {goods.map(good => (\n      <li\n        key={good.id}\n        data-cy=\"good\"\n        style={{ backgroundColor: good.color }}\n        className=\"GoodsList__item\"\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport function getAll(): Promise<Good[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error occured while loading data');\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => goods.sort(\n      (firstGood, secondGood) => firstGood.name.localeCompare(secondGood.name),\n    ).slice(0, 5));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods.filter(\n      ({ color }) => color === 'red',\n    ));\n};\n","import './Button.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  id: string,\n  content: string,\n  loadGoods: () => void,\n  selected: boolean,\n  setSelected: (id: string) => void,\n  isLoading: boolean,\n};\n\nexport const Button: React.FC<Props> = ({\n  id,\n  content,\n  loadGoods,\n  setSelected,\n  selected,\n  isLoading,\n}) => {\n  const handleClick = () => {\n    loadGoods();\n    setSelected(id);\n  };\n\n  return (\n    <button\n      type=\"button\"\n      data-cy={id}\n      onClick={handleClick}\n      disabled={isLoading || selected}\n      className={classNames('Button', { Button__active: selected })}\n    >\n      {content}\n    </button>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { GoodsList } from './components/GoodsList/GoodsList';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\nimport { Good } from './types/Good';\nimport { Button as ButtonComponent } from './components/Button';\nimport { Loader } from './components/Loader';\nimport { Button } from './types/Button';\n\nconst defaultButtons: Button[] = [\n  {\n    id: 'all-button',\n    action: getAll,\n    title: 'Load all goods',\n  },\n  {\n    id: 'first-five-button',\n    action: get5First,\n    title: 'Load 5 first goods',\n  },\n  {\n    id: 'red-button',\n    action: getRedGoods,\n    title: 'Load red goods',\n  },\n];\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [activeButton, setActiveButton] = useState('');\n\n  const handleGoodsLoad = async (callback: () => Promise<Good[]>) => {\n    try {\n      setLoading(true);\n      const loadedGoods = await callback();\n\n      setGoods(loadedGoods);\n    } catch (err) {\n      const typedError = err as Error;\n\n      setError(typedError.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1\n        className=\"App__title\"\n      >\n        Dynamic list of Goods\n      </h1>\n\n      <ul className=\"App__buttons-list\">\n        {defaultButtons.map(({ id, title, action }) => (\n          <li key={id} className=\"App__buttons-item\">\n            <ButtonComponent\n              id={id}\n              loadGoods={() => handleGoodsLoad(action)}\n              setSelected={setActiveButton}\n              selected={activeButton === id}\n              isLoading={loading}\n              content={title}\n            />\n          </li>\n        ))}\n      </ul>\n\n      {loading && (\n        <Loader />\n      )}\n\n      {error\n        ? <h2>{error}</h2>\n        : <GoodsList goods={goods} />}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}